import { ArgumentRequirement, Module, ModuleActionArgument } from "@app/types/Module";
import { Singleton } from "../_Singleton";
import * as utils from "../_utils";
import { MessageEmbed } from "discord.js";
import * as osu from "./_osu";
import * as i18n from "@app/modules/i18n";
import * as fs from "fs";

// function sec2str(s) {
// 	return parseInt(s / 60) + ":" + ("0" + (s % 60)).slice(-2);
// }

// function equalDate(d1, d2) {
// 	return Math.abs(d1 - d2) < 10 * 1000;
// }

// function hl(s, b = true) {
// 	return (b ? "**" : "") + s + (b ? "**" : "");
// }

export const module: Module = {
	trigger: osu.getModeStrings().map(m => `r${m}`),
	event: "messageCreate",
	argv: {
		id: [ArgumentRequirement.Optional, ArgumentRequirement.Concat]
	},
	init: osu.init,
	action: async (obj: ModuleActionArgument) => {
		// try {
			const m = osu.parseModeString(obj.trigger.substr(1));

			const user = await osu.fetchOsuUser(obj);

			const statusMsg = await obj.message.channel.send(
				"```\n" + utils.timeFormat() + "\t" + "Process started.\n```"
			);
			const addText = async function (text: string) {
				return statusMsg.edit(
					statusMsg.content.substr(0, statusMsg.content.length - 4) +
					"\n" +
					utils.timeFormat() +
					"\t" +
					text +
					"\n```"
				);
			};

			if (!user) {
				return statusMsg.edit(`Unknown user \`${obj.argv!.id}\`.`);
			}
			const userRecents = await Singleton.osuClient!.scores.recent(user.user_id, {
				limit: 50,
				m
			});

			const latestPlay = userRecents[0];

			if (!latestPlay) {
				return statusMsg.edit(
					"No recent play found for user `" + user.username + "`."
				);
			}

			const b = latestPlay.beatmap_id;
			const retryCount = userRecents.filter((a) => {
				return a.beatmap_id == b;
			}).length;

			const bmap = (
				await Singleton.osuClient!.beatmaps.get({
					b, m, a: 1, mods: Number(latestPlay.enabled_mods) & (2 | 16 | 64 | 256)
				})
			)[0]; // Recent beatmap info

			// const ret = {
			// 	time: latestPlay.date,
			// 	pmeta: {
			// 		username: userInfo.username,
			// 		userid: userInfo.user_id,
			// 	},
			// 	bmeta: {
			// 		bid: b,
			// 		sid: bmap.beatmapset_id,
			// 		beatmap:
			// 			bmap.artist +
			// 			" - " +
			// 			bmap.title +
			// 			" [" +
			// 			bmap.version +
			// 			"]",
			// 		star: {
			// 			htotal: false,
			// 			total: utils.round(Number(bmap.diff_overall), 2),
			// 			star_aim: utils.round(Number(bmap.diff_aim), 2),
			// 			star_speed: utils.round(Number(bmap.diff_speed), 2),
			// 			star_drain: utils.round(Number(bmap.diff_drain), 2),
			// 		},
			// 		bpm: bmap.bpm,
			// 		length: bmap.total_length,
			// 		diff: {
			// 			hCS: false,
			// 			hAR: false,
			// 			hHP: false,
			// 			hOD: false,

			// 			CS: bmap.diff_size,
			// 			AR: bmap.diff_approach,
			// 			HP: bmap.diff_drain,
			// 			OD: bmap.diff_overall,
			// 		},
			// 	},
			// 	mode: {
			// 		mode: m,
			// 		text: osu.modes[m].text,
			// 		color: osu.modes[m].color,
			// 	},
			// 	score: {
			// 		mod: osu.parseOsuMod(latestPlay.enabled_mods).join(" "),
			// 		noteDesc: Object.keys(osu.modes[m].scoreText).join(" / "),
			// 		note: Object.values(osu.modes[m].scoreText)
			// 			.map((a: string) => (latestPlay as any)[a])
			// 			.join(" / "),
			// 		score: latestPlay.score,
			// 		rank: latestPlay.rank,
			// 		acc: utils.round(osu.modes[m].acc(latestPlay), 2) + "%",
			// 		combo: hl(
			// 			latestPlay.maxcombo +
			// 			"x / " +
			// 			(bmap.max_combo === null ? "???" : bmap.max_combo) +
			// 			"x",
			// 			latestPlay.perfect == "1"
			// 		),
			// 		retryCount: retryCount,
			// 		newRecord: false,
			// 		userBoardPos: -1,
			// 		newBpPos: -1,
			// 	},
			// };
			return obj.message.reply("uwu");
		// 	const osuFile = "./.osu/" + b + ".osu";
		// 	if (!fs.existsSync(osuFile)) {
		// 		await addText(
		// 			"Fetching beatmap " + ret.bmeta.beatmap + "."
		// 		);
		// 		let tryCount = 0;
		// 		let success = false;

		// 		while (tryCount <= 1) {
		// 			const data = await osu.fetchBeatmap(b, tryCount);
		// 			if (data.substr(0, 8) == "osu file") {
		// 				fs.writeFileSync(osuFile, data);
		// 				success = true;
		// 				break;
		// 			} else {
		// 				await addText(
		// 					"Download retry count " + tryCount
		// 				);
		// 				tryCount++;
		// 			}
		// 		}

		// 		if (!success) {
		// 			return statusMsg.edit("Download beatmap failed.");
		// 		}
		// 	}

		// 	const bdata = await Singleton.osuClient!.osuParse(b);

		// 	if (m < 2) {
		// 		await addText("Calculating PP.");
		// 		const oppai = await osu.oppai({
		// 			b,
		// 			miss: latestPlay.countmiss,
		// 			100: latestPlay.count100,
		// 			50: latestPlay.count50,
		// 			cb: latestPlay.maxcombo,
		// 			m: String(m),
		// 			mod: latestPlay.enabled_mods,
		// 		});
		// 		const fc_oppai = await osu.oppai({
		// 			b,
		// 			acc: String(osu.modes[m].acc(latestPlay)),
		// 			m: String(m),
		// 			mod: latestPlay.enabled_mods,
		// 		});
		// 		const ss_oppai = await osu.oppai({
		// 			b,
		// 			m: String(m),
		// 			mod: latestPlay.enabled_mods,
		// 		});

		// 		ret.score.pp = utils.round(oppai.pp);
		// 		ret.score.pp_fc = utils.round(fc_oppai.pp);
		// 		ret.score.pp_ss = utils.round(ss_oppai.pp);

		// 		ret.score.pp_aim = utils.round(oppai.aim_pp);
		// 		ret.score.pp_speed = utils.round(oppai.speed_pp);
		// 		ret.score.pp_acc = utils.round(oppai.acc_pp);
		// 	} else if (m == 3) {
		// 		// mania pp
		// 		ret.score.pp = utils.round(
		// 			await Singleton.osuClient!.mania_pp(
		// 				bmap.difficultyrating,
		// 				bdata,
		// 				latestPlay.enabled_mods,
		// 				ret.score.score
		// 			)
		// 		);
		// 		ret.score.pp_fc = utils.round(
		// 			await Singleton.osuClient!.mania_pp(
		// 				bmap.difficultyrating,
		// 				bdata,
		// 				latestPlay.enabled_mods,
		// 				(1000000 * 300) / 320
		// 			)
		// 		);
		// 		ret.score.pp_ss = utils.round(
		// 			await Singleton.osuClient!.mania_pp(
		// 				bmap.difficultyrating,
		// 				bdata,
		// 				latestPlay.enabled_mods
		// 			)
		// 		);
		// 	}

		// 	if (latestPlay.enabled_mods & (2 | 16 | 64 | 256)) {
		// 		ret.bmeta.star.htotal = true;
		// 		ret.bmeta.diff.hCS = latestPlay.enabled_mods & (2 | 16);
		// 		ret.bmeta.diff.hAR = true;
		// 		ret.bmeta.diff.hHP = true;
		// 		ret.bmeta.diff.hOD = true;
		// 	}

		// 	if (latestPlay.rank == "F" && m < 2) {
		// 		ret.score.compconste =
		// 			utils.round(
		// 				(osu.modes[m].score
		// 					.map((a) => {
		// 						return latestPlay[a];
		// 					})
		// 					.reduce((a, b) => a + b, 0) /
		// 					(oppai.num_circles +
		// 						oppai.num_sliders +
		// 						oppai.num_spinners)) *
		// 				100,
		// 				3
		// 			) + "%";
		// 	}

		// 	if (latestPlay.rank != "F") {
		// 		// pass
		// 		const userRecord = (await Singleton.osuClient!.scores.get({ u: u, b: b, m: m }))[0]; // Best record on map

		// 		const bp = await Singleton.osuClient!.getUserBest({ u: u, m: m, limit: 100 }); // BP
		// 		const newBpItem = bp.filter((a) => {
		// 			(a) =>
		// 				a.beatmap_id == b && equalDate(a.date, latestPlay.date);
		// 		});
		// 		if (newBpItem.length) {
		// 			ret.score.newBpPos =
		// 				bp
		// 					.map((a) => a.beatmap_id)
		// 					.indexOf(newBpItem[0].beatmap_id) + 1;
		// 		}

		// 		if (userRecord && equalDate(userRecord.date, latestPlay.date)) {
		// 			// recent == best
		// 			ret.score._pp = ret.score.pp;
		// 			ret.score.pp =
		// 				userRecord.pp == 0
		// 					? "(" + ret.score.pp + ")"
		// 					: "__" + utils.round(userRecord.pp) + "__"; // loved pp = 0
		// 			ret.score.newRecord = true;

		// 			const scoreboard = await Singleton.osuClient!.scores.get({
		// 				b: b,
		// 				m: m,
		// 				limit: 100,
		// 			}); // leaderboard
		// 			const scoreItem = scoreboard.filter((a) => {
		// 				return a.score_id == userRecord.score_id;
		// 			}); // play makes him on board?
		// 			if (scoreItem.length)
		// 				ret.score.userBoardPos =
		// 					scoreboard
		// 						.map((a) => a.score_id)
		// 						.indexOf(userRecord.score_id) + 1;
		// 		}
		// 	}

		// 	if (latestPlay.enabled_mods & (64 | 256)) {
		// 		ret.bmeta.bpm = hl(
		// 			utils.round(
		// 				ret.bmeta.bpm *
		// 				(latestPlay.enabled_mods & 64 ? 1.5 : 0.75),
		// 				1
		// 			)
		// 		);
		// 		ret.bmeta.length = hl(
		// 			sec2str(
		// 				utils.round(
		// 					ret.bmeta.length *
		// 					(latestPlay.enabled_mods & 64
		// 						? 1 / 1.5
		// 						: 1 / 0.75),
		// 					0
		// 				)
		// 			)
		// 		);
		// 	} else {
		// 		ret.bmeta.length = sec2str(ret.bmeta.length);
		// 	}

		// 	const embed = new MessageEmbed()
		// 		.setColor(ret.mode.color)
		// 		.setThumbnail(
		// 			"https://b.ppy.sh/thumb/" + ret.bmeta.sid + "l.jpg"
		// 		)
		// 		.setTitle(ret.mode.text + " " + ret.bmeta.beatmap)
		// 		.setURL("https://osu.ppy.sh/b/" + ret.bmeta.bid)
		// 		.setTimestamp(ret.time)
		// 		.addField(
		// 			"Metadata",
		// 			hl(ret.bmeta.star.total, ret.bmeta.star.htotal) +
		// 			" " +
		// 			osu.diffEmoji(ret.bmeta.star.total) +
		// 			"\t" +
		// 			ret.bmeta.bpm +
		// 			" <:osuMetaBPM:546037644929269761>\t" +
		// 			ret.bmeta.length +
		// 			" <:osuMetaTL:546037644954435614>",
		// 			true
		// 		)
		// 		.addField("Mods", ret.score.mod, true)
		// 		.addField(ret.score.noteDesc, ret.score.note, true)
		// 		.addField(
		// 			"Score",
		// 			(ret.score.newRecord ? ":new: " : "") +
		// 			(ret.score.userBoardPos != -1
		// 				? hl("r#" + ret.score.userBoardPos) + "\t"
		// 				: "") +
		// 			(ret.score.newBpPos != -1
		// 				? hl("BP#" + ret.score.newBpPos) + "\t"
		// 				: "") +
		// 			(ret.score.newRecord ? "__" : "") +
		// 			ret.score.score.toLocaleString() +
		// 			(ret.score.newRecord ? "__" : "") +
		// 			osu.rankEmoji(ret.score.rank) +
		// 			ret.score.acc,
		// 			true
		// 		)
		// 		.addField(
		// 			"Combo",
		// 			ret.score.combo +
		// 			(ret.score.rank == "F"
		// 				? " (" + (ret.score.compconste || "???") + " C)"
		// 				: ""),
		// 			true
		// 		)
		// 		.addField(
		// 			"Difficulty",
		// 			(() => {
		// 				const o = [];
		// 				for (const i in ret.bmeta.diff) {
		// 					if (i.indexOf("h") == 0) continue;

		// 					if (m == 3) {
		// 						const key_count;
		// 						if (bdata.Mode != 3) {
		// 							// converted map
		// 							const p =
		// 								bdata.hitObjects.filter(
		// 									(a) => a.endTime
		// 								).length / bdata.hitObjects.length; // percentSliderOrSpinner
		// 							const cs = Math.round(bdata.CircleSize);
		// 							const od = Math.round(bdata.OverallDifficlty);

		// 							if (p < 0.2) {
		// 								key_count = 7;
		// 							} else if (p < 0.3 || cs >= 5) {
		// 								key_count = od > 5 ? 7 : 6;
		// 							} else if (p > 0.6) {
		// 								key_count = od > 4 ? 5 : 4;
		// 							} else {
		// 								key_count = Math.max(
		// 									4,
		// 									Math.min(od + 1, 7)
		// 								);
		// 							}

		// 							key_count = "(" + key_count + ")";
		// 						} else {
		// 							key_count = ret.bmeta.diff.CS;
		// 						}

		// 						switch (i) {
		// 							case "AR":
		// 								break;
		// 							case "CS":
		// 								o.push(key_count + "K");
		// 								break;
		// 							default:
		// 								o.push(
		// 									i +
		// 									hl(
		// 										ret.bmeta.diff[i],
		// 										ret.bmeta.diff["h" + i]
		// 									)
		// 								);
		// 								break;
		// 						}
		// 					} else if (m == 1) {
		// 						switch (i) {
		// 							case "AR":
		// 							case "CS":
		// 								break;
		// 							default:
		// 								o.push(
		// 									i +
		// 									hl(
		// 										ret.bmeta.diff[i],
		// 										ret.bmeta.diff["h" + i]
		// 									)
		// 								);
		// 								break;
		// 						}
		// 					} else {
		// 						o.push(
		// 							i +
		// 							hl(
		// 								ret.bmeta.diff[i],
		// 								ret.bmeta.diff["h" + i]
		// 							)
		// 						);
		// 					}
		// 				}
		// 				return o.join(" ");
		// 			})(),
		// 			true
		// 		);

		// 	if (utils.isValid(ret.score.pp)) {
		// 		embed.addField(
		// 			"PP",
		// 			[
		// 				"🈶 " + ret.score.pp + "pp",
		// 				"🈴 " + ret.score.pp_fc + "PP",
		// 				"🈵 " + ret.score.pp_ss + hl("PP"),
		// 			].join("\n"),
		// 			true
		// 		);
		// 		if (m < 2) {
		// 			embed.addField(
		// 				"Acc / Aim / Speed PP",
		// 				[ret.score.pp_acc, ret.score.pp_aim, ret.score.pp_speed]
		// 					.map((a) => {
		// 						fpp = ret.score._pp | ret.score.pp;
		// 						return (
		// 							utils.rod(a, fpp, 8) +
		// 							" " +
		// 							(a | 0) +
		// 							" " +
		// 							(((a / fpp) * 100) | 0) +
		// 							"%"
		// 						);
		// 					})
		// 					.join("\n"),
		// 				true
		// 			);
		// 		}
		// 	}

		// 	LocalStorage["osu_recent"][message.channel.id] = ret;
		// 	return statusMsg.edit("Try #" + ret.score.retryCount, { embed });
		// } catch (e) {
		// 	await statusMsg.edit(
		// 		"Error occured. (" +
		// 		e.message +
		// 		") Contact author " +
		// 		utils.author_tag
		// 	);
		// 	utils.pm(message, "```\n" + JSON.stringify(ret, null, 4) + "\n```");
		// 	throw e;
		// }
	},
};
